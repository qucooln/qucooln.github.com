<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Qucooln on Github]]></title>
  <link href="http://qucooln.github.io/atom.xml" rel="self"/>
  <link href="http://qucooln.github.io/"/>
  <updated>2013-08-06T23:47:36+08:00</updated>
  <id>http://qucooln.github.io/</id>
  <author>
    <name><![CDATA[Qucooln]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C内存管理原理]]></title>
    <link href="http://qucooln.github.io/blog/2013/08/06/objective-cnei-cun-guan-li-yuan-li/"/>
    <updated>2013-08-06T15:14:00+08:00</updated>
    <id>http://qucooln.github.io/blog/2013/08/06/objective-cnei-cun-guan-li-yuan-li</id>
    <content type="html"><![CDATA[<p>Objective-C中的内存管理机制是刚入门时比较不容易摸透的一块知识，表面上是简单的init/alloc，retain，release的游戏，可是实现下来发现很多细节并不像自己所理解的那样。这篇文章主要讨论一下Objective-C中最基本的内存管理机制的基本原理，可以帮助真正理解OC中的内存管理，以便在实现项目中可以正确运用。</p>

<h3>1.Objective-C内存管理流程</h3>

<p>在C语言时代，内存管理基本靠malloc和free在堆区分配和回收内存，栈区的内存分配基本由系统自动管理。而在堆区手动管理内存效率并不高，malloc分配内存不能满足动态分配的特性，而且会造成碎片问题，C++的new/delete运算符稍有优化，但是还是存在问题。OC的内存管理的确是由手动控制，但其实现方式满足动态分配，并且修正了内存碎片的问题。它引进了一套“引用计数”的机制来实现内存管理，在Apple Developer Library里面可以看到这样一幅流程图<sup>[1]</sup>：</p>

<p><img class="center" src="http://qucooln.github.io/images/BlogIllustration/memory_management.png" width="696" height="411"></p>

<P ALIGN="CENTER" style="font-size: 11pt">
图1 Objective-C内存管理基本流程示意图
</P>




<!--more-->


<p>从流程图中可以看到，Class A初始化之后得到的对象的引用计数(retian count)是1，持有者是Class A；接着Class B通过retain方式持有这个对象，这个对象的引用计数是2，持有者是Class A和Class B；这时有一个Class C通过copy的方式得到了一份拷贝，这个拷贝对象的引用计数是1，这个拷贝对象的持有者是Class C；
Class A不想再持有这个对象，于是release，这时对象引用计数为1，持有者剩下Class B，接着Class B也release，这时原来的对象引用计数为0，没有持有者，销毁；对于Class C得到了拷贝对象之后，release掉，引用计数为0，没有持有者，销毁。
这便是OC中最常见的内存管理流程。</p>

<h3>2.Objective-C内存管理基本操作及其实现原理</h3>

<p>OC的基本内存管理操作其实和“四原则”想表达的内容是一致的，所谓“四原则”在Apple的文档中也给出了明确的定义<sup>[1]</sup>：</p>

<ul>
<li>自己生成的对象自己持有</li>
<li>非自己生成的对象，也能通过retain持有</li>
<li>不再需要自己持有的对象时释放</li>
<li>非自己持有的对象无法释放</li>
</ul>


<h4>2.1 alloc</h4>

<h4>2.2 retain</h4>

<h4>2.3 release</h4>

<h4>2.4 dealloc</h4>

<h3>3.最佳实践</h3>

<h2>Reference</h2>

<p>[1] <a href="https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011-SW1">Advanced Memory Management Programming Guide</a></p>
]]></content>
  </entry>
  
</feed>
